/*  OffLine Minimum                                                                     
*  Using the JavaScript language, have the function OffLineMinimum(strArr) take the    
*  strArr parameter being passed which will be an array of integers ranging from       
*  1...n and the letter "E" and return the correct subset based on the following       
*  rules. The input will be in the following format: ["I","I","E","I",...,"E",...,"I"]
*  where the I's stand for integers and the E means take out the smallest integer      
*  currently in the whole set. When finished, your program should return that new set  
*  with integers separated by commas. For example: if strArr is                        
*  ["5","4","6","E","1","7","E","E","3","2"] then your program should return 4,1,5. 
*/

// input - array of Strings. Eg:["I","I","E","I",...,"E",...,"I"]
// output - new set of integers seperated by comma
// process - Loop through the array of integers, When 'E' is encountered, then find the mimimum number of the subset of numbers so far.

function sortNumbers(numbers) {
  numbers.sort(function(a, b) {
    return a - b;
  });
}

function findMin(numbers) {
  numbers = mapNumbers(numbers);
  sortNumbers(numbers);
  return numbers[0].toString();
}

function mapNumbers(numbers) {
  return numbers.map(function(a) {
    return parseInt(a);
  });
}

function offLineMimimum(numbersAndE) {
  var minNumbers = [];
  var num
  var i = 0;
  var tempNumbers = [];
  while (i < numbersAndE.length) {
    if (numbersAndE[i] === 'E') {
      var min = findMin(tempNumbers);
      tempNumbers.splice(tempNumbers.indexOf(min), 1);
      minNumbers.push(parseInt(min));
    } else {
      tempNumbers.push(numbersAndE[i]);
    }
    i += 1;
  }
  return minNumbers;
}

/*  Additive Persistence                                                                
*  Using the JavaScript language, have the function AdditivePersistence(num) take the  
*  num parameter being passed which will always be a positive integer and return its   
*  additive persistence which is the number of times you must add the digits in num    
*  until you reach a single digit. For example: if num is 2718 then your program       
*  should return 2 because 2 + 7 + 1 + 8 = 18 and 1 + 8 = 9 and you stop at 9.  
*/

// input - number, a positive integer
// output - number (added up sum of the digits until a single digit number is reached)
// process - add up the digits of the number recursively until a single didgit is reached
function getNumbers(a) {
  return parseInt(a);
}

function addNumbers(a, b) {
  return a + b;
}

function additivePersistence(num) {
  var numbers = num.toString().split('').map(getNumbers);
  var sum = numbers.reduce(addNumbers);
  if (sum.toString().length === 1) {
    return sum;
  }
  return additivePersistence(sum);
}
